(* Starting file for the server *)

import lists
import declassifyutil
import stdio

let 
    fun matchprofile data_a data_b =
        let pini authority
            val _ = print "HI"

            val (profile_a,agent_a,pid_a) = data_a
            val (profile_b,agent_b,pid_b) = data_b
            val result_a = agent_a profile_b
            val result_b = agent_b profile_a
            val (preference_a, a_for_b) = result_a
            val (preference_b, b_for_a) = result_b
            val (lev_a,_,_,_,_) = profile_a
            val (lev_b,_,_,_,_) = profile_b
            val flag = preference_a andalso preference_b
            val newflag = declassifydeep(flag,authority,`{}`)

            val _ = if newflag then
                let pini authority
                    val _ = print "MATCH!!!!"
                    val _ = send (pid_a,("NEWMATCH",b_for_a))
                    val _ = send (pid_b,("NEWMATCH",a_for_b))
                in()
                end
                else() 
                
        in ()
        end    

    fun server db = (* TODO: finish this *)
         let 
          val data = receive [hn ("NEWPROFILE", data )
                                => data]
          val (profile,agent,pid) = data
          val _ = print data
          val _ = map (matchprofile data) db
         in 
          server (data::db)
         end


    (* Our main function starts the server and then requests the
       dispatcher to send some clients this way. *)

    fun main () =       
        let val thisNode = node (self ())
            val _ = printString ("Running node with identifier: " ^ thisNode)
            val _ =  register ("datingServer", spawn (fn() => server []), authority)
        in  
            send (whereis ("@dispatcher", "dispatcher"), ("DISPATCH", thisNode)); 
            ()
        end
in main ()
end
