(* Placeholder for the dating-client. Note that in order to communicate 
   with your server you will need to create the corresponding trustmap *)
   
import stdio
import lists
import declassifyutil

let 
    fun loop () =
                let  
                    val _ = print "Waiting for response..."
                    val newResponse = receive [hn ("NEWMATCH", newResponse) => newResponse]
                    val _ = print(newResponse)
                in loop ()
                end
    fun agent profile_b = 
      let 
        (*val decprofile = declassifydeep(profile_b, authority, `{}`)*)
        val (lev_b,name_b,age_b,gender_b,interests_b) = profile_b

        val lev = `{bob}`
        val name = "Bob" raisedTo lev_b
        val year = 2001 raisedTo lev_b
        val gender = false raisedTo lev_b
        val interests = ["beer","winter"] raisedTo lev_b
        val profile = (lev,name,year,gender,interests)

        val preference = true raisedTo lev_b
        val maybeProfile = profile raisedTo lev_b
      in 
        (preference,maybeProfile)
      end
    fun clientBob serverid =
      let 
         val lev = `{bob}`
         val name = "Bob" raisedTo lev
         val year = 2001 raisedTo lev
         val gender = false raisedTo lev
         val interests = ["beer","winter"] raisedTo lev
         val profile = (lev,name,year,gender,interests)
         val test = agent profile
         val _ = send(serverid,("NEWPROFILE",(profile,agent,self())))
         
         (*val _ = printWithLabels(profile)
         val _ = printWithLabels(test)
         *)
         val _ = print "SENT"
      in loop()
      end
   val serverid = whereis("QmNzXPVyMYojkfP8JjVqwy4NWbqYyovThEk3bkK4t4Ny6a","datingServer")
in spawn (fn() => clientBob serverid)
end